// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: message.proto

package message_v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessageV1Client is the client API for MessageV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageV1Client interface {
	ConnectChat(ctx context.Context, in *ConnectChatRequest, opts ...grpc.CallOption) (MessageV1_ConnectChatClient, error)
	Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type messageV1Client struct {
	cc grpc.ClientConnInterface
}

func NewMessageV1Client(cc grpc.ClientConnInterface) MessageV1Client {
	return &messageV1Client{cc}
}

func (c *messageV1Client) ConnectChat(ctx context.Context, in *ConnectChatRequest, opts ...grpc.CallOption) (MessageV1_ConnectChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessageV1_ServiceDesc.Streams[0], "/message_v1.MessageV1/ConnectChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageV1ConnectChatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessageV1_ConnectChatClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type messageV1ConnectChatClient struct {
	grpc.ClientStream
}

func (x *messageV1ConnectChatClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageV1Client) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/message_v1.MessageV1/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageV1Server is the server API for MessageV1 service.
// All implementations must embed UnimplementedMessageV1Server
// for forward compatibility
type MessageV1Server interface {
	ConnectChat(*ConnectChatRequest, MessageV1_ConnectChatServer) error
	Send(context.Context, *SendRequest) (*empty.Empty, error)
	mustEmbedUnimplementedMessageV1Server()
}

// UnimplementedMessageV1Server must be embedded to have forward compatible implementations.
type UnimplementedMessageV1Server struct {
}

func (UnimplementedMessageV1Server) ConnectChat(*ConnectChatRequest, MessageV1_ConnectChatServer) error {
	return status.Errorf(codes.Unimplemented, "method ConnectChat not implemented")
}
func (UnimplementedMessageV1Server) Send(context.Context, *SendRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedMessageV1Server) mustEmbedUnimplementedMessageV1Server() {}

// UnsafeMessageV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageV1Server will
// result in compilation errors.
type UnsafeMessageV1Server interface {
	mustEmbedUnimplementedMessageV1Server()
}

func RegisterMessageV1Server(s grpc.ServiceRegistrar, srv MessageV1Server) {
	s.RegisterService(&MessageV1_ServiceDesc, srv)
}

func _MessageV1_ConnectChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectChatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessageV1Server).ConnectChat(m, &messageV1ConnectChatServer{stream})
}

type MessageV1_ConnectChatServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type messageV1ConnectChatServer struct {
	grpc.ServerStream
}

func (x *messageV1ConnectChatServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _MessageV1_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageV1Server).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/message_v1.MessageV1/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageV1Server).Send(ctx, req.(*SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageV1_ServiceDesc is the grpc.ServiceDesc for MessageV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "message_v1.MessageV1",
	HandlerType: (*MessageV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _MessageV1_Send_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConnectChat",
			Handler:       _MessageV1_ConnectChat_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "message.proto",
}
